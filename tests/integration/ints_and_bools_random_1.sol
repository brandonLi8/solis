# Copyright Â© 2022-2023 Brandon Li. All rights reserved.

##
Random test of a Solis program that uses ints, bools, and all the operators that are associated with them.
NOTE: this file was auto-generated with the `ints_and_bools_random.py` script.
##

(-((-((((((let a1: int = -(516)) * (-((633) + (a1)))) / (a1)) / (a1)) + (-(824))) + (let b1: int = -(let c1: int = let d1: int = 626)))) + (let e1: float = -(11.96014618998068)))) * (-(e1));
-(e1);
e1;
e1;
-((30.71403009455417) - (-(e1)));
45.01913136182097;
-(e1);
e1;
let f1: float = let g1: float = -(let h1: float = e1);
(let i1: float = -(e1)) + (-((-(e1)) - (-((let j1: int = -((-(836)) % (-(127)))) + (-(379))))));
let k1: float = -(46.96370513874232);
-(e1);
-(let l1: float = g1);
-(f1);
let m1: float = h1;
-(g1);
let n1: float = (-(i1)) + (-(m1));
-(let o1: float = l1);
h1;
-(i1);
k1;
-(o1);
-(l1);
f1;
-((-(let p1: float = l1)) + (o1));
-(12.993231083945146);
-(m1);
k1;
40.55180550847344;
-(p1);
20.140264579759318;
-(10.702496636668762);
(-(p1)) + (-(i1));
-(let q1: float = 1.0949619582927321);
(-(c1)) / ((-(2.120082705186048)) + (let r1: int = j1));
-(g1);
-(i1);
-((k1) * (-(let s1: int = -(346))));
i1;
g1;
-(q1);
-(g1);
k1;
4.982243153538414;
-(k1);
35.06581477834245;
-(k1);
-(let t1: float = -(l1));
-(((-(394)) / (403)) / (-(q1)));
-((-(t1)) + (d1));
-(m1);
l1;
-(let u1: float = -(49.974660725307956));
(-(k1)) - (610);
m1;
-(p1);
17.052862851302876;
26.319957450006846;
o1;
-(40.0956845603553);
(15.059369695686822) - (-(u1));
-(l1);
let v1: float = -(t1);
n1;
-(o1);
let w1: float = 37.12838189613691;
24.736202818445385;
t1;
(-(((r1) / (-(964))) + (-((-(s1)) - (let x1: int = -(let a2: int = -((-(b1)) / (b1)))))))) / (-(let b2: float = f1));
30.581031873688634;
-(let c2: float = 48.59351781159961);
-(f1);
v1;
-(q1);
-(24.368053344828848);
-((let d2: float = b2) + (7.302441019579071));
-(4.97275235644085);
u1;
p1;
-(g1);
-(let e2: float = -(17.314745074865783));
-(g1);
-(10.264729181654628);
-(q1);
-((f1) + (-(n1)));
w1;
-(p1);
26.726981037079643;
-(i1);
-(b2);
(-(u1)) * ((a1) - (-(719)));
u1;
12.433436256641665;
-(u1);
let f2: float = -(v1);
-(g1);
-(f1);
k1;
-((-(p1)) / (-(v1)));
41.61079966622264;
-(10.96361353680289);
-(e2);
-(let g2: float = g1);
-(f2);
-(g2);
t1;
37.41937323225643;
-(let h2: float = -((-(36)) + (o1)));
o1;
-(b2);
f2;
v1;
(-(let i2: float = 19.11830326265228)) * (g2);
-((h2) * (a1));
-(44.475903761740845);
w1;
-(g1);
-(18.10835314191101);
f2;
-((-(b1)) / (v1));
f2;
-(h2);
((t1) - (-(s1))) * ((-(let j2: int = 927)) + ((-(891)) - (-(h1))));
31.671692756630176;
n1;
-(n1);
-(8.162908605636186);
-(let k2: float = 7.037619511435485);
m1;
-(e2);
p1;
-(e1);
-(g1);
(g2) * (b2);
let l2: float = (-(c2)) + (23.10324746715239);
-(f1);
-(((-((g1) - (-(s1)))) * (-(b1))) * (-(u1)));
b2;
-(m1);
-(l2);
let m2: float = -(m1);
-(let n2: float = b2);
f2;
let o2: float = -(q1);
-(let p2: float = (o1) - (-((-(let q2: float = -(o1))) * (566))));
-(g1);
-(d2);
let r2: float = (-(q1)) * (-(let s2: float = -(o2)));
-(48.049421060448495);
let t2: float = -(f2);
-(l2);
-(k2);
-(15.796630079048676);
v1;
let u2: float = (-(17.861727350609055)) + (-(let v2: int = let w2: int = -((a1) + (-(let x2: int = -(25))))));
(o1) / (c1);
b2;
m1;
-((-(n1)) - (-(16.543146606581068)));
-(let a3: float = let b3: float = -(p1));
-(let c3: float = (a1) + (-(k2)));
o1;
-(h2);
c2;
15.576433870601152;
38.7406886960273;
-(l2);
-(s2);
g1;
let d3: float = -((r1) * (-(u1)));
(-(let e3: float = -(29.318581643472367))) * (r1);
d3;
-(39.513970095666124);
-((47.547093796133964) * (let f3: int = -(let g3: int = -(w2))));
-(33.02412767759822);
u2;
e2;
c2;
t1;
-(37.59489194408032);
-(q2);
let h3: float = -(v1);
-(let i3: float = (x2) - (-(36.63586655693014)));
-(28.727524908923435);
-(l1);
i1;
b2;
-(f2);
24.686483467823443;
k2;
-(let j3: float = 29.206131858765204);
h1;
-(n1);
h2;
-(9.562134159651485);
-(15.765299574783358);
n1;
-(let k3: float = (-((g3) - (-(a1)))) + (-(i3)));
-(k1);
t1;
a1 + d1 + c1 + b1 + e1 + h1 + g1 + f1 + i1 + j1 + k1 + l1 + m1 + n1 + o1 + p1 + q1 + r1 + s1 + t1 + u1 + v1 + w1 + a2 + x1 + b2 + c2 + d2 + e2 + f2 + g2 + h2 + i2 + j2 + k2 + l2 + m2 + n2 + o2 + q2 + p2 + s2 + r2 + t2 + x2 + w2 + v2 + u2 + b3 + a3 + c3 + d3 + e3 + g3 + f3 + h3 + i3 + j3 + k3